{
#Initial Template for Python 3
class Node:
    data=0
    left=None
    right=None
    
def preOrder(root):
    if root is None:
        return 
    print(root.data,end=" ")
    preOrder(root.left)
    preOrder(root.right)
    
def main():
    testcases=int(input())
    while(testcases>0):
        root=None
        sizeOfArray=int(input())
        arr=[int(x) for x in input().strip().split()]
      
        root=constructBst(arr,sizeOfArray)
        
        preOrder(root)
        print()
       
        testcases-=1
if __name__=="__main__":
    main()
}

''' Please note that it's Function problem i.e.
you need to write your solution in the form of Function(s) only.
Driver Code to call/invoke your function is mentioned above. '''

#User function Template for python3
##Structure of node
'''
class Node:
    data=0
    left=None
    right=None
'''
def constructBstUtil(arr,postOrder):
    for i in range(len(arr)):
        
        # print(postOrder)
        try:
            index = postOrder.index(arr[i])
            node = Node()
            node.data = arr[i]
            node.left = node.right = None
            print("postOrder : ",str(postOrder))
            l_arr=postOrder[:index]
            r_arr=postOrder[index+1:]
            print("data : "+str(arr[i])+" l_arr : "+str(l_arr)+" r_arr :"+str(r_arr))
            if len(l_arr) > 0:
                print("left in")
                node.left = constructBstUtil(arr[i+1:],l_arr)
                print("left out")
            if len(r_arr) > 0:
                print("right in")
                node.right = constructBstUtil(arr[i+1:],r_arr)
                print("right out")
        except:
            pass
    print("return Node : ",node.data)
    return node
##Complete this function
def constructBst(arr,n):
    ##Your code here
    postOrder = sorted(arr)
    # print(postOrder)
    root = constructBstUtil(arr,postOrder)
    preOrder(root)
    
